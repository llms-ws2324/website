---
title: "Project description"
---

## Introduction

**TL;DR**: *Choose an use case and use the concepts and methods covered in our course to effectively create a LLM application. That is your final project.*

The goal of the final project is for you to create a LLM application of your own choosing and effectively document and communicate the results (using the concepts and technology we covered in this course).

Choose the use case based on your group's interests or work you all have done in other courses or research projects.
The goal of this project is for you to demonstrate proficiency in the techniques we have covered in this course (and beyond, if you like) and apply them to a use case in a meaningful way.

All prototypes must be done in Python, and all components of the project **must be reproducible** (with the exception of the final presentation) placed inside the provided GitHub repo.

## Topic ideas {#sec-topic-ideas}

Identify 3 project ideas you're interested in potentially using for the final project. If you're unsure where to find use cases, you can use the [Tips + Resources](project-tips-resources.qmd) section as a starting point. 

## Project grading criterias

**1. Use Case Identification (20 points)**

1. **Relevance and Originality (10 points)**
    - **Exceptional (8-10):** Use case is original, highly relevant to the target audience, and exhibits deep insight into potential applications of generative AI.
    - **Proficient (5-7):** Use case is relevant and somewhat original.
    - **Basic (3-4):** Use case is somewhat relevant but lacks originality.
    - **Needs Improvement (0-2):** Use case lacks relevance and originality.

2. **Clear Definition and Scope (10 points)**
    - **Exceptional (8-10):** The problem statement is clearly defined, its scope is appropriate, and boundaries are set.
    - **Proficient (5-7):** The problem is mostly defined with a reasonable scope.
    - **Basic (3-4):** The problem definition and scope are vague.
    - **Needs Improvement (0-2):** The problem is poorly defined with an unclear scope.

**2. Application Development (40 points)**

3. **Code Quality and Organization (10 points)**
    - **Exceptional (8-10):** Code is exceptionally well-organized, uses effective naming conventions, includes meaningful comments, and follows best practices.
    - **Proficient (5-7):** Code is organized, generally follows best practices, but might have minor issues.
    - **Basic (3-4):** Code is somewhat organized but lacks clarity, has sparse commenting, or has other issues.
    - **Needs Improvement (0-2):** Code is disorganized, lacks comments, and does not follow best practices.

4. **Algorithm Implementation and Efficiency (15 points)**
    - **Exceptional (12-15):** Algorithm is efficiently implemented, innovative, and addresses the generative AI use case effectively.
    - **Proficient (8-11):** Algorithm addresses the use case effectively but may lack optimization.
    - **Basic (4-7):** Algorithm somewhat addresses the use case but has clear shortcomings.
    - **Needs Improvement (0-3):** Algorithm is poorly implemented or does not address the use case.

5. **Error Handling and Robustness (10 points)**
    - **Exceptional (8-10):** Application includes thorough error handling, manages exceptions gracefully, and provides helpful feedback.
    - **Proficient (5-7):** Basic error handling is present, with some exceptions managed.
    - **Basic (3-4):** Minimal error handling, application may crash or behave unpredictably under unexpected conditions.
    - **Needs Improvement (0-2):** Application lacks error handling or is very fragile.

6. **Integration of AI (5 points)**
    - **Exceptional (4-5):** AI is seamlessly integrated, enhancing the application's primary functions.
    - **Proficient (3):** AI is integrated but may not be central to the application.
    - **Basic (1-2):** AI is present but feels tacked on or superficial.
    - **Needs Improvement (0):** Little to no AI integration.

**3. User Interface (UI) (20 points)**

7. **Design and Aesthetics (10 points)**
    - **Exceptional (8-10):** UI is intuitive, visually appealing, and enhances user experience.
    - **Proficient (5-7):** UI is functional and mostly user-friendly but may lack visual appeal.
    - **Basic (3-4):** UI has usability issues or lacks visual appeal.
    - **Needs Improvement (0-2):** UI is poorly designed or significantly hampers user experience.

8. **Usability and Interaction (10 points)**
    - **Exceptional (8-10):** UI is highly interactive, responsive, and ensures a smooth user experience.
    - **Proficient (5-7):** UI is mostly interactive with minor issues.
    - **Basic (3-4):** UI has several usability or interaction issues.
    - **Needs Improvement (0-2):** UI lacks interactivity or is difficult to use.

**4. Documentation and Presentation (20 points)**

9. **Project Documentation with [Design Science Research](https://kirenz.github.io/thesis-guide/docs/design-science-research.html#) and GitHub (10 points)**
    - **Exceptional (8-10):** Documentation is comprehensive, covering the use case, design decisions, implementation, and user instructions.
    - **Proficient (5-7):** Documentation covers most aspects of the project but may lack depth.
    - **Basic (3-4):** Documentation covers some aspects but lacks clarity or detail.
    - **Needs Improvement (0-2):** Minimal to no documentation.

10. **Presentation and Communication (10 points)**
    - **Exceptional (8-10):** Clearly and effectively communicates the project's purpose, design, and results. Demonstrates enthusiasm and knowledge about the project.
    - **Proficient (5-7):** Communicates most aspects of the project effectively.
    - **Basic (3-4):** Communication lacks clarity or misses key points.
    - **Needs Improvement (0-2):** Struggles to communicate the project's purpose or results.

**Total Maximum Points:** 100


